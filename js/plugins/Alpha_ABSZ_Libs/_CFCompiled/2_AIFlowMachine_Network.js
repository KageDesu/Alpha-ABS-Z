// Generated by CoffeeScript 2.6.1
//╒═════════════════════════════════════════════════════════════════════════╛
// ■ AIFlowMachine.coffee
//╒═════════════════════════════════════════════════════════════════════════╛
//---------------------------------------------------------------------------
(function() {
  var _;
  //@[DEFINES]
  _ = AIFlowMachine.prototype;
  _._createNetworkObserver = function() {
    this.netDataObserver = new DataObserver();
    this.netDataObserver.setCheckInterval(10); //TODO: ???
    this._fillNetworkObserver();
    return this.netDataObserver.refreshAll(this);
  };
  //TODO: Добавить API для разработчиков плагинов вносить свои поля (и так со всем Observers)
  // * Движение передаётся отдельным методом для достижения плавности
  _._fillNetworkObserver = function() {
    return this.netDataObserver.addFields(this, ["state", "prevState"]);
  };
  _._updateDataObserver = function() {
    if (this.netDataObserver == null) {
      return;
    }
    this.netDataObserver.check(this);
    if (this.netDataObserver.isDataChanged()) {
      this.dataObserverHaveChanges();
      this.netDataObserver.refreshAll(this);
    }
  };
  // * Этот метод вызывается, когда изменились сихнронизируеммые данные
  _.dataObserverHaveChanges = function() {
    AANetworkManager.syncAIFlowMachineObserver(this.id, this._getObserverDataForNetwork());
  };
  _._getObserverDataForNetwork = function() {
    return this.netDataObserver.getDataForNetwork(this);
  };
  _.applyObserverData = function(data) {
    if (this.netDataObserver == null) {
      return;
    }
    this.netDataObserver.setDataFromNetwork(this, data);
  };
})();

// ■ END AIFlowMachine.coffee
//---------------------------------------------------------------------------
