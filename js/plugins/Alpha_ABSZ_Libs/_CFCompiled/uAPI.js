// Generated by CoffeeScript 2.5.1
// * Глабольный набор вспомогательных функций для пользователя
var uAPI;

uAPI = function() {};

(function() {  //╒═════════════════════════════════════════════════════════════════════════╛
  // ■ IMPLEMENTATION.coffee
  //╒═════════════════════════════════════════════════════════════════════════╛
  //---------------------------------------------------------------------------
  var _;
  //@[DEFINES]
  _ = uAPI;
  //TODO: Execute SAction (global)

  // * Добавить навык на панель навыков
  // * 0 - убрать из слота
  // * slotSymbol == null - в любое не занятое место
  _.setSkillToPanel = function(skillId, slotSymbol) {
    var e, ref, ref1, ref2;
    try {
      if (skillId <= 0) { // * Удаляем навык из панели
        if (AA.Utils.isSkillPanelSymbol(slotSymbol)) {
          if ((ref = $gamePlayer.aaSkillsSet) != null) {
            ref.setSymbolForSkill(0, slotSymbol, null); // * Устанавливаем навык на панель
          }
        }
      } else {
        // * Если НАВЫК, то должен быть изучен
        if (AA.Utils.isAASkill(skillId)) {
          if (!$gamePlayer.aaIsHaveABSSkill(skillId)) {
            return;
          }
        }
        // * Предметы можно устанавливать, даже если нет в инвентаре (будет 0)
        if (AA.Utils.isSkillPanelSymbol(slotSymbol)) {
          if ((ref1 = $gamePlayer.aaSkillsSet) != null) {
            ref1.setSymbolForSkill(skillId, slotSymbol, null); // * Если символ не указан (или указан неверно, то устанавливаем в свободное место)
          }
        } else {
          if ((ref2 = $gamePlayer.aaSkillsSet) != null) {
            ref2.setSkillInEmptySlot(skillId);
          }
        }
      }
      AA.UI.refreshElement('skills');
    } catch (error) {
      e = error;
      KDCore.warning(e);
    }
  };
  // * Добавить предмет на панель навыков, поддерживает как обычные ID, так и aID
  _.setItemToPanel = function(itemId, slotSymbol) {
    var e;
    try {
      // * Автоматическое преобразование в ID предмета
      if (itemId > 0 && !AA.isAAItem(itemId)) {
        itemId += AA.Utils.ItemsIDStart;
      }
      this.setSkillToPanel(itemId, slotSymbol);
    } catch (error) {
      e = error;
      KDCore.warning(e);
    }
  };
  // * Если навыка нет или неверно указан slotSymbol - будет возвращён 0
  _.getSkillIdFromPanel = function(slotSymbol) {
    var ref;
    return (ref = $gamePlayer.aaSkillsSet) != null ? ref.getSkillForSymbol(slotSymbol) : void 0;
  };
  _.pauseABS = function() {
    return AA.System.pauseABS();
  };
  _.resumeABS = function() {
    return AA.System.resumeABS();
  };
  _.editUI = function() {
    var e;
    try {
      if (AA.isMap()) {
        return SceneManager.push(AA.Scene_UIEditor);
      }
    } catch (error) {
      e = error;
      return KDCore.warning(e);
    }
  };
  _.controlUIElement = function() {
    var e, user;
    try {
      user = $gameSystem.aaGetUserUISettings();
      user.set(...arguments);
      return AA.UI.refreshElement(arguments[0]);
    } catch (error) {
      e = error;
      return KDCore.warning(e);
    }
  };
  _.showUI = function() {
    var e, user;
    try {
      user = $gameSystem.aaGetUserUISettings();
      // * Просто удаляем настройки, так как по умолчанию интерфейс всегда видно
      // * других настроек у интерфейса нету
      user.set("main", "clear");
      return AA.UI.show();
    } catch (error) {
      e = error;
      return KDCore.warning(e);
    }
  };
  _.hideUI = function() {
    var e, user;
    try {
      user = $gameSystem.aaGetUserUISettings();
      user.set("main", "setVisible", false);
      return AA.UI.hide();
    } catch (error) {
      e = error;
      return KDCore.warning(e);
    }
  };
  //TODO: Этот метод добавить в SActions !!!
  //TODO: show on map point, show on screen point
  _.showPopUpOnChar = function(charId, styleId, value, isVariable) {
    var char, e, settings;
    try {
      if (!KDCore.Utils.isSceneMap()) {
        return;
      }
      if (value > 0 && isVariable === true) {
        value = $gameVariables.value(value);
      }
      if (charId === 0) {
        char = $gamePlayer;
      } else {
        char = $gameMap.event(charId);
      }
      settings = AA.PP.getPopUpDamageSettings(styleId);
      if (settings == null) {
        AA.w("PopUp settings with ID " + styleId + " not found!");
      } else {
        Sprite_AADamagePopUpItem.CreateOnCharacter(char, settings, value);
      }
    } catch (error) {
      e = error;
      return KDCore.warning(e);
    }
  };
})();

// ■ END IMPLEMENTATION.coffee
//---------------------------------------------------------------------------
