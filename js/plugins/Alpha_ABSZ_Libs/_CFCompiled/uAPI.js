// Generated by CoffeeScript 2.5.1
// * Глабольный набор вспомогательных функций для пользователя
var uAPI;

uAPI = function() {};

(function() {  //╒═════════════════════════════════════════════════════════════════════════╛
  // ■ IMPLEMENTATION.coffee
  //╒═════════════════════════════════════════════════════════════════════════╛
  //---------------------------------------------------------------------------
  var _;
  //@[DEFINES]
  _ = uAPI;
  //TODO: put and remove skills from skill panel

  //TODO: Не работает (UI панель не обновляется)
  _.setSkillToPanel = function(skillId, slotSymbol) {
    var e, ref, ref1, symbols;
    try {
      if (!$gamePlayer.aaIsHaveABSSkill(skillId)) {
        return;
      }
      symbols = AA.Input.skillPanelSymbols;
      if (String.any(slotSymbol)) {
        if (symbols.contains(slotSymbol)) {
          if ((ref = $gamePlayer.aaSkillsSet) != null) {
            ref.setSymbolForSkill(skillId, slotSymbol, null);
          }
        }
      } else {
        if ((ref1 = $gamePlayer.aaSkillsSet) != null) {
          ref1.setSkillInEmptySlot(skillId);
        }
      }
    } catch (error) {
      e = error;
      KDCore.warning(e);
    }
  };
  _.pauseABS = function() {
    return AA.System.pauseABS();
  };
  _.resumeABS = function() {
    return AA.System.resumeABS();
  };
  _.editUI = function() {
    var e;
    try {
      if (AA.isMap()) {
        return SceneManager.push(AA.Scene_UIEditor);
      }
    } catch (error) {
      e = error;
      return KDCore.warning(e);
    }
  };
  _.controlUIElement = function() {
    var e, user;
    try {
      user = $gameSystem.aaGetUserUISettings();
      user.set(...arguments);
      return AA.UI.refreshElement(arguments[0]);
    } catch (error) {
      e = error;
      return KDCore.warning(e);
    }
  };
  _.showUI = function() {
    var e, user;
    try {
      user = $gameSystem.aaGetUserUISettings();
      // * Просто удаляем настройки, так как по умолчанию интерфейс всегда видно
      // * других настроек у интерфейса нету
      user.set("main", "clear");
      return AA.UI.show();
    } catch (error) {
      e = error;
      return KDCore.warning(e);
    }
  };
  _.hideUI = function() {
    var e, user;
    try {
      user = $gameSystem.aaGetUserUISettings();
      user.set("main", "setVisible", false);
      return AA.UI.hide();
    } catch (error) {
      e = error;
      return KDCore.warning(e);
    }
  };
  _.showPopUpOnChar = function(charId, styleId, value, isVariable) {
    var char, e, settings;
    try {
      if (!KDCore.Utils.isSceneMap()) {
        return;
      }
      if (value > 0 && isVariable === true) {
        value = $gameVariables.value(value);
      }
      if (charId === 0) {
        char = $gamePlayer;
      } else {
        char = $gameMap.event(charId);
      }
      settings = AA.PP.getPopUpDamageSettings(styleId);
      if (settings == null) {
        AA.w("PopUp settings with ID " + styleId + " not found!");
      } else {
        Sprite_AADamagePopUpItem.CreateOnCharacter(char, settings, value);
      }
    } catch (error) {
      e = error;
      return KDCore.warning(e);
    }
  };
})();

// ■ END IMPLEMENTATION.coffee
//---------------------------------------------------------------------------
//TODO: show on map point, show on screen point
