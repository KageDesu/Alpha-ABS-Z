// Generated by CoffeeScript 2.5.1
// * Свободное состояние для АИ враг
var EnemyAI_FreeFlow;

EnemyAI_FreeFlow = class EnemyAI_FreeFlow extends AIFlow {
  constructor() {
    super(...arguments);
    return;
  }

  onStateStart() {
    "IN FREE STATE".p();
    this._restoreMoveData();
    this._isTargetInViewRadius = false;
  }

  onStateEnd() {
    "FREE END".p();
    this._storeHomePoint();
  }

};

(function() {  //╒═════════════════════════════════════════════════════════════════════════╛
  // ■ EnemyAI_FreeFlow.coffee
  //╒═════════════════════════════════════════════════════════════════════════╛
  //---------------------------------------------------------------------------
  var _;
  //@[DEFINES]
  _ = EnemyAI_FreeFlow.prototype;
  _._setup = function() {
    this._checkVisionTimer = 0;
    this._checkTargetInRangeTimer = 0;
  };
  _._updateFlow = function() {
    this._updateReturnToHome();
    //TODO: Временно отключим Visor для врагов, у которых нет АБС навыков вообще
    if (!this.battler().isHaveAnyAASkill()) {
      return;
    }
    return this._updateVision();
  };
  _._updateReturnToHome = function() {
    var char, e, homePoint;
    char = this.char();
    if (char == null) {
      return;
    }
    homePoint = char.homePoint;
    if (homePoint == null) {
      return;
    }
    try {
      if (char.aaIsNearThePoint(homePoint, 1)) {
        char.aaResetHomePoint(); // * Сброс точки "дома"
        this._restoreMoveData(); // * Выход из режима движения
      } else {
        char.aaSetMoveTypeReturnToHomePoint();
      }
    } catch (error) {
      e = error;
      this._restoreMoveData();
      AA.w(e);
    }
  };
  // * Используется двойная проверка. Сперва простая проверка, что цель в радиусе видимости
  // * Уже затем, если цель в радиусе, проверяется линия видимости
  //TODO: Целей может быть несколько, надо проверять линию на каждую и находить оптимальную (видимую)
  _._updateVision = function() {
    // * Если цель в радиусе видимости
    if (this._isTargetInViewRadius === true) {
      // * То проверяем чтобы цель была в линии видиомости (нет препятствий)
      this._updateVisionLine();
    }
    // * В любом случае, проверяем снова, что цель в радиусе видимости
    return this._updateVisionRadius();
  };
  _._updateVisionRadius = function() {
    this._checkVisionTimer++;
    if (this._checkVisionTimer >= 4) {
      this._checkVisionTimer = 0;
      //TODO: Сейчас идёт проверка только на игрока
      //TODO: Добавить фильтр isActive (например когда игрок в технике)
      this._isTargetInViewRadius = AATargetsManager.isPlayerInRadius(this.char(), this.model().viewRadius);
      if (this._isTargetInViewRadius === true) {
        "PL IN RADIUS".p();
      }
    }
  };
  _._updateVisionLine = function() {
    if (this._isTargetInViewRadius === false) {
      return;
    }
    this._checkTargetInRangeTimer++;
    if (this._checkTargetInRangeTimer >= 2) {
      this._checkTargetInRangeTimer = 0;
      if (AAVisionManager.isVisionLineIsFree(this.char(), $gamePlayer)) {
        //TODO: Тут надо фильтры применять, чтобы проверять только врагов, а не всех подряд
        this._onSeeTarget($gamePlayer);
      }
    }
  };
  _._onSeeTarget = function(target) {
    this.entity().setTarget(target);
    "SEE TARGET IN LINE".p();
    //TODO: if enemy have actions, then switch to battle state
    if (this.battler().isHaveAnyAASkill()) {
      this.logic().switchToBattleState();
    } else {

    }
  };
  
  // * Восстановить настройки движения, если они были сохраненны
  //TODO: if can't fight?
  //TODO: escapeFromBattle like (Типо отходить от игрока)
  // * Тоже самое поведение, что и если не может драться (noFight)
  //TODO: noFight - такого параметра не будет, хотите чтобы не дрался, не давайте действий
  _._restoreMoveData = function() {
    var e, ref;
    try {
      "RESTORE MOVE DATA".p();
      if ((ref = this.char()) != null) {
        ref.aaRestoreMoveData();
      }
    } catch (error) {
      e = error;
      AA.w(e);
    }
  };
  // * Сохранить позицию перед выходом из состояния
  _._storeHomePoint = function() {
    var ref;
    if ((ref = this.char()) != null) {
      ref.aaStoreHomePoint();
    }
  };
})();

// ■ END EnemyAI_FreeFlow.coffee
//---------------------------------------------------------------------------
