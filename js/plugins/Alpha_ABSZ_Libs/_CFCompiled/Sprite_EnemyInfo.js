// Generated by CoffeeScript 2.5.1
// * Класс для отображения информации о враге на экране (портрет, здоровье и т.д.)
(function() {
  var Sprite_EnemyInfo;
  Sprite_EnemyInfo = class Sprite_EnemyInfo extends AA.Sprite_UIElement {
    constructor() {
      super(...arguments);
    }

    defaultParams() {
      return {
        visible: true,
        position: {
          x: 640,
          y: 66
        },
        image: "Enemy_Background",
        isCanBeEdited: true,
        isHideWithMessage: true,
        nameFormat: "%1",
        levelFormat: "Lv. %1",
        hpTextFormat: "%1 / %2", // * %3 - Для процента, %1 - текущее, %2 - максимум
        nameText: {
          visible: true,
          size: {
            w: 100,
            h: 20
          },
          alignment: "left",
          font: {
            face: "AABS_2",
            size: 16,
            italic: false
          },
          margins: {
            x: 10,
            y: 6
          },
          outline: {
            color: null,
            width: 3
          },
          textColor: "#d05816".toCss()
        },
        hpText: {
          visible: true,
          size: {
            w: 100,
            h: 20
          },
          alignment: "left",
          font: {
            face: "AABS_0",
            size: 13,
            italic: false
          },
          margins: {
            x: 12,
            y: 28
          },
          outline: {
            color: null,
            width: 2
          },
          textColor: "#edead8".toCss()
        },
        levelText: {
          visible: true,
          size: {
            w: 100,
            h: 20
          },
          alignment: "right",
          font: {
            face: "AABS_1",
            size: 12,
            italic: false
          },
          margins: {
            x: 60,
            y: 4
          },
          outline: {
            color: null,
            width: 2
          },
          textColor: "#edeb6a".toCss()
        },
        gauge: {
          visible: true,
          fill: "Player_HPGauge",
          foreground: "",
          mask: "",
          backColor: "#000000".toCss(),
          backOpacity: 160,
          vertical: false,
          margins: {
            x: 6,
            y: 28
          }
        },
        face: {
          visible: true,
          faceName: "",
          faceIndex: 0,
          mirror: false,
          size: 74,
          margins: {
            x: 92,
            y: 10
          }
        },
        battleState: {
          visible: true,
          image: "Enemy_BattleState_Free",
          margins: {
            x: 142,
            y: 60
          }
        },
        foregroundImage: {
          visible: false,
          image: "",
          margins: {
            x: 0,
            y: 0
          }
        }
      };
    }

    //TODO: Уже есть в двух классах, может вынести на UIElement ???
    //(Sprite_CharacterMiniGauge)
    showSlow() {
      if (this.visible === true && this.opacity >= 255) {
        return;
      }
      this.visible = true;
      this.changer = new AA.Changer(this);
      this.changer.change('opacity').from(0).to(255).step(35).start();
    }

    hideSlow() {
      if (this.visible === false) {
        return;
      }
      if (this.opacity <= 0) {
        return;
      }
      this.changer = new AA.Changer(this);
      this.changer.change('opacity').from(this.opacity).to(0).step(45).start().done(() => {
        return this.visible = false;
      });
    }

    //$[OVER]
    isCanBeEdited() {
      return this.params.isCanBeEdited === true;
    }

    //$[OVER]
    isHaveHideWithMessageFlag() {
      return this.params.isHideWithMessage === true;
    }

    // * Value: level
    drawLevelWithFormat(value) {
      var ref;
      return (ref = this.levelText) != null ? ref.draw(this.params.levelFormat.replace("%1", value)) : void 0;
    }

    // * Values: current, max, rate
    drawHpWithFormat(value1, value2, value3) {
      var text;
      if (this.hpText == null) {
        return;
      }
      text = this.params.hpTextFormat.replace("%1", value1);
      if (value2 != null) {
        text = text.replace("%2", value2);
      }
      if (value3 != null) {
        text = text.replace("%3", value3);
      }
      return this.hpText.draw(text);
    }

    // * Value: name
    drawNameWithFormat(value) {
      var ref;
      return (ref = this.nameText) != null ? ref.draw(this.params.nameFormat.replace("%1", value)) : void 0;
    }

    drawFace(faceName, faceIndex) {
      var ref;
      return (ref = this.face) != null ? ref.draw(...arguments) : void 0;
    }

    //TODO: Отрисовка пользовательских картинок цели
    drawCustomImages() {}

    // * удаляются и отрисовываются заного
    update() {
      var ref;
      super.update();
      return (ref = this.changer) != null ? ref.update() : void 0;
    }

  };
  AA.link(Sprite_EnemyInfo);
})();

(function() {  //╒═════════════════════════════════════════════════════════════════════════╛
  // ■ PRIVATE
  //╒═════════════════════════════════════════════════════════════════════════╛
  //---------------------------------------------------------------------------
  var _;
  //@[DEFINES]
  _ = AA.Sprite_EnemyInfo.prototype;
  //$[OVER]
  _._createContent = function() {
    if (!this.isActive()) {
      return;
    }
    this._createBase();
    this._createGauge();
    this._createHpText();
    this._createFaceImage();
    this._createNameText();
    this._createLevelText();
    this._createBattleState();
    // * Слой для статусов и бафов
    this._statesLayer = new Sprite();
    this.addChild(this._statesLayer);
    // * Для пользовательских картинок из параметров конкретного монстра
    this._customImagesLayer = new Sprite();
    this.addChild(this._customImagesLayer);
    this._createForegroundImage();
    return this.move(this.params.position);
  };
  _._createBase = function() {
    this.base = new AA.Sprite_UIImage(this.params);
    this.add(this.base);
  };
  _._createGauge = function() {
    this.gauge = new AA.Sprite_UIGauge(this.params.gauge);
    this.gauge.move(this.params.gauge.margins);
    return this.add(this.gauge);
  };
  _._createHpText = function() {
    this.hpText = new AA.Sprite_UIText(this.params.hpText);
    return this.add(this.hpText);
  };
  _._createFaceImage = function() {
    this.face = new AA.Sprite_UIFace(this.params.face);
    this.face.move(this.params.face.margins);
    return this.add(this.face);
  };
  _._createNameText = function() {
    this.nameText = new AA.Sprite_UIText(this.params.nameText);
    return this.add(this.nameText);
  };
  _._createLevelText = function() {
    this.levelText = new AA.Sprite_UIText(this.params.levelText);
    return this.add(this.levelText);
  };
  _._createBattleState = function() {
    this.battleState = new AA.Sprite_UIImage(this.params.battleState);
    this.battleState.move(this.params.battleState.margins);
    return this.add(this.battleState);
  };
  // * Для пользователя, по умолчанию не используется
  _._createForegroundImage = function() {
    var foregroundImage;
    foregroundImage = new AA.Sprite_UIImage(this.params.foregroundImage);
    foregroundImage.move(this.params.foregroundImage.margins);
    return this.add(foregroundImage);
  };
})();

// ■ END PRIVATE
//---------------------------------------------------------------------------
