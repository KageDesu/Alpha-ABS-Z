// Generated by CoffeeScript 2.5.1
// * Основной класс менеджер интерфейса (API)
AA.UI = function() {};

(function() {  //╒═════════════════════════════════════════════════════════════════════════╛
  // ■ AA.UI.coffee
  //╒═════════════════════════════════════════════════════════════════════════╛
  //---------------------------------------------------------------------------
  var _;
  //@[DEFINES]
  _ = AA.UI;
  _.setUI = function(uiSet) {
    this.uiSet = uiSet;
    return this._subscribeForEvents();
  };
  // * Когда появляется окно с сообщением
  _.onGameMessageStart = function() {
    var ref;
    return (ref = this.uiSet) != null ? ref.onGameMessageStart() : void 0;
  };
  // * Когда заканчивается окно с сообщением
  _.onGameMessageEnd = function() {
    var ref;
    return (ref = this.uiSet) != null ? ref.onGameMessageEnd() : void 0;
  };
  // * Когда было нажатие мышки на какой-либо UI элемент
  _.isUITouched = function() {
    return false;
  };
  _.terminate = function() {
    var ref;
    return (ref = this.uiSet) != null ? ref.terminate() : void 0;
  };
  (function() {    // * Основной интерфейс Spriteset_UI
    // -----------------------------------------------------------------------
    _.refresh = function() {
      var ref;
      return (ref = this.uiSet) != null ? ref.refresh() : void 0;
    };
    _.refreshElement = function(tag) {
      var ref;
      return (ref = this.uiSet) != null ? ref.refreshElement(tag) : void 0;
    };
    _.hide = function() {
      var ref;
      return (ref = this.uiSet) != null ? ref.hide() : void 0;
    };
    _.show = function() {
      var ref;
      return (ref = this.uiSet) != null ? ref.show() : void 0;
    };
    // * Если какой-либо UI элемент обрабатывает нажатие курсора, то true
    return _.isAnyUIElementTouchProcess = function() {
      return false;
    };
  })();
  (function() {    // -----------------------------------------------------------------------

    // * Набор навыков
    // -----------------------------------------------------------------------
    // * Когда игрок нажал на кнопку какого-либо навыка на панели навыков
    return _.skillPerformResult = function(skillId, result) {
      var cntrl, e;
      try {
        if (this.uiSet == null) {
          return;
        }
        cntrl = this.uiSet.getController("skills");
        return cntrl != null ? cntrl.onSkillPerformResult(skillId, result) : void 0;
      } catch (error) {
        e = error;
        return AA.w(e);
      }
    };
  })();
  (function() {    // -----------------------------------------------------------------------

    // * Цель игрока
    // -----------------------------------------------------------------------
    // * Круг под выбранной целью (установить спрайт круга)
    _.setSelectedCircle = function(selectedCircle) {
      this.selectedCircle = selectedCircle;
    };
    // * Выбрать цель на карте
    _.selectTargetOnMap = function(char) {
      var ref;
      return (ref = this.selectedCircle) != null ? ref.setTarget(char) : void 0;
    };
    // * Сбросить выбор цели на карте
    _.resetTargetSelection = function() {
      return _.selectTargetOnMap(null);
    };
    //TODO: Либо проверять спрайт либо есть ли цель у игрока (TargetManager)
    return _.isSelectedCircleVisible = function() {
      var ref;
      return ((ref = this.selectedCircle) != null ? ref.visible : void 0) === true;
    };
  })();
  (function() {    // -----------------------------------------------------------------------

    // * Выбор зоны применения навыка на карте
    // -----------------------------------------------------------------------
    // * Установить спрайт зоны поражаения навыка
    _.setSkillImpactSelector = function(skillSelector) {
      this.skillSelector = skillSelector;
    };
    // * Активировать зону поражения (показать спрайт)
    _.activateSkillImpactSelector = function(aaSkill) {
      var ref;
      return (ref = this.skillSelector) != null ? ref.activate(aaSkill) : void 0;
    };
    return _.resetSkillImpactSelector = function() {
      var ref;
      return (ref = this.skillSelector) != null ? ref.deactivate() : void 0;
    };
  })();
  (function() {    // -----------------------------------------------------------------------

    // * Обработка АБС событий
    // -----------------------------------------------------------------------
    _._subscribeForEvents = function() {
      AA.EV.subscribeFor("PlayerTarget", this.gev_onPlayerTargetChanged);
      //AA.EV.subscribeFor("PlayerChangeState", @gev_onPlayerStateChanged)
      return AA.EV.subscribeFor("PlayerSkillSelector", this.gev_onPlayerSkillSelector);
    };
    // * Когда цель игрока была изменена
    _.gev_onPlayerTargetChanged = function() {
      "PLAYER TARGET CHANGED".p();
      return AA.UI.selectTargetOnMap($gamePlayer.AATarget());
    };
    // * Когда статус (поведения, действия) игрока меняется
    _.gev_onPlayerStateChanged = function() {};
    _.gev_onPlayerSkillSelector = function() {
      if ($gamePlayer.isInSkillTargetingState()) {
        return AA.UI.activateSkillImpactSelector($gamePlayer.activeAASkill());
      } else {
        return AA.UI.resetSkillImpactSelector();
      }
    };
  })();
})();

// ■ END AA.UI.coffee
//---------------------------------------------------------------------------
